#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2014 OpenWrt.org

. /lib/functions/network.sh

START=50
USE_PROCD=1

append_arg() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get val "$cfg" "$var"
	[ -n "$val" -o -n "$def" ] && procd_append_param command $opt "${val:-$def}"
}

append_bool() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get_bool val "$cfg" "$var" "$def"
	[ "$val" = 1 ] && procd_append_param command "$opt"
}

start_instance() {
	local cfg="$1"
	local aux

	config_get_bool aux "$cfg" 'disabled' '0'
	[ "$aux" = 1 ] && return 1

	procd_open_instance

	procd_set_param command /usr/bin/udpxy
	procd_append_param command "-T"

	append_bool "$cfg" verbose "-v"
	append_bool "$cfg" status "-S"
	append_arg "$cfg" bind "-a"
	append_arg "$cfg" port "-p"

	local source
	config_get source "$cfg" source

	[ -n "$source" ] || {
		local s_network
		local wait=10

		config_get s_network "$cfg" source_network
		[ -z "$s_network" ] || {
			network_get_device source "$s_network"

			while [ -z "$source" ] && [ "$wait" -le 0 ]; do
				sleep 2

				network_flush_cache
				network_get_device source "$s_network"

				let wait-=1
			done
		}
	}

	[ -z "$source" ] || procd_append_param command -m "${source}"

	append_arg "$cfg" max_clients "-c"
	append_arg "$cfg" log_file "-l"
	append_arg "$cfg" buffer_size "-B"
	append_arg "$cfg" buffer_messages "-R"
	append_arg "$cfg" buffer_time "-H"
	append_arg "$cfg" nice_increment "-n"
	append_arg "$cfg" mcsub_renew "-M"

	config_get_bool aux "$cfg" 'respawn' '0'
	[ "$aux" = 1 ] && procd_set_param respawn

	procd_close_instance
}

trigger_instance() {
	local cfg="$1"
	local aux

	config_get_bool aux "$cfg" 'disabled' '0'
	[ "$aux" = 1 ] && return 1

	local s_network;
	config_get s_network "$cfg" source_network
	[ -z "$s_network" ] || procd_add_reload_interface_trigger "$s_network"
}

service_triggers() {
	procd_add_reload_trigger "udpxy"

	config_load udpxy
	config_foreach trigger_instance udpxy
}

reload_service() {
	restart
}

start_service() {
	config_load udpxy
	config_foreach start_instance udpxy
}
